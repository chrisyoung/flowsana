module Repository
  module Database
    class <%= file_name.camelize %>
      def initialize(listener = nil)
        @listener = listener
        @adapter  = Repository::Adapters::AR::<%= file_name.camelize %>.new(self)
        @model    = ::<%= file_name.camelize %>
      end

      def create(attributes)
        @model.new(attributes).tap do |<%= file_name %>|
          return unless <%= file_name %>.valid?
          @adapter.create(<%= file_name %>.attributes)
        end
      end

      def <%= file_name %>_adapter_create_success(sequence)
        @listener.<%= file_name %>_repository_create_success(sequence)
      end

      def list
        @listener.<%= file_name %>_repository_list_success(@adapter.list)
      end

      def count
        @model.count
      end

      def update(id, attributes)
        @adapter.update(id, attributes)
      end

      def <%= file_name %>_adapter_update_success(<%= file_name %>)
        @listener.<%= file_name %>_repository_update_success(<%= file_name %>)
      end

      def first
        @adapter.first
      end

      def <%= file_name %>_adapter_list_success(sequences)
        @listener.<%= file_name %>_repository_list_success(sequences)
      end

      def read(id)
        @adapter.read(id)
      end

      def <%= file_name %>_adapter_read_success(<%= file_name %>)
        @listener.<%= file_name %>_repository_read_success(<%= file_name %>)
      end
    end
  end
end

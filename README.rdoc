HOROR - Hexagonal Architecture on Ruby on Rails.
Don't throw the baby out with the bathwater

Constraints
  * No mixins, no inheritance
  * Repositories are always CRUD
  * One usecase, one repository
  * Uses listener pattern
  * Resourceful
  * Hexagonal

Benefits
  * Driven by use cases
  * Active Record is isolated
  * Easily Testable
  * Maintainable
  * Navigable
  * Portable
  * Works with Rails
  * listener helper for controllers
  * DomainDriven::UseCase makes it easy to call use cases
  * Generators

TODO
  * Generate route, controller, and migration
  * Rename RHAG to Domain Driven
  * Move Domain Driven to its own repo
  * Move Repository::Adapters to Repository::Database::Adapters
  * Don't mix active_model into models
  * Wrap models in active_model in the rails service
  * Generator to build hexagon in lib
  * Build rails gem for
      domain_dviven
      domain_driven::generators
      domain_driven::rails

Consider:

  class DomainDriven::RailsHelpers::WrapActiveModel
    # Listener

    def wrap(model)
      active_model make_active_model(model)

      @listener.active_model_wrap_success(active_model)
    end
  end
